using SoundDevices;
using System;
using System.Windows.Forms;
using Commands.Television;
using Commands.Speakers;
using Commands;
using SoundDeviceRemotes;

namespace Client
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }
        private ISoundDevice television = TelevisionRemote.GetSoundDevice();
        private ISoundDevice speakers = SpeakersRemote.GetSoundDevice();

        private ICommand tvCommand;
        private ICommand speakersCommand;

        string deviceFeedback = "";

        // Handlers for executing buttons
        private void BtnExecuteTVCommand_Click(object sender, EventArgs e)
        {
            if(tvCommand != null)
            {
                // Execute command and also assign result 
                deviceFeedback = tvCommand.Execute();

                listBox1.Items.Add(deviceFeedback);
            }         
        }
        private void BtnExecuteSpeakersCommand_Click(object sender, EventArgs e)
        {
            if(speakersCommand != null)
            {
                // Execute command and also assign result 
                deviceFeedback = speakersCommand.Execute();

                listBox1.Items.Add(deviceFeedback);
            }
            
        }

        // TV radio buttons handlers
        private void OnTvRadioButton_CheckedChanged(object sender, EventArgs e)
        {
            RadioButton rb = sender as RadioButton;
            if (rb.Checked)
            {
                tvCommand = new TurnTelevisionOn(television);
            }
        }
        private void OffTvRadioButton_CheckedChanged(object sender, EventArgs e)
        {
            RadioButton rb = sender as RadioButton;
            if (rb.Checked)
            {
                tvCommand = new TurnTelevisionOff(television);
            }
        }
        private void VolumeUpTvRadioButton_CheckedChanged(object sender, EventArgs e)
        {
            RadioButton rb = sender as RadioButton;
            if (rb.Checked)
            {
                tvCommand = new TurnTelevisionVolumeUp(television);
            }
        }
        private void VolumeDownTVRadioButton_CheckedChanged(object sender, EventArgs e)
        {
            RadioButton rb = sender as RadioButton;
            if (rb.Checked)
            {
                tvCommand = new TurnTelevisionVolumeDown(television);
            }
        }

        // Speakers radio buttons handlers
        private void OnSpeakersRadioButton_CheckedChanged(object sender, EventArgs e)
        {
            RadioButton rb = sender as RadioButton;
            if (rb.Checked)
            {
                speakersCommand = new TurnSpeakersOn(speakers);
            }
        }
        private void OffSpeakersRadioButton_CheckedChanged(object sender, EventArgs e)
        {
            RadioButton rb = sender as RadioButton;
            if (rb.Checked)
            {
                speakersCommand = new TurnSpeakersOff(speakers);
            }
        }
        private void VolumeUpSpeakersRadioButton_CheckedChanged(object sender, EventArgs e)
        {
            RadioButton rb = sender as RadioButton;
            if (rb.Checked)
            {
                speakersCommand = new TurnSpeakersVolumeUp(speakers);
            }
        }
        private void VolumeDownSpeakersRadioButton_CheckedChanged(object sender, EventArgs e)
        {
            RadioButton rb = sender as RadioButton;
            if (rb.Checked)
            {
                speakersCommand = new TurnSpeakersVolumeDown(speakers);
            }
        }
    }
}
namespace Client
{
    partial class Form1
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.panel1 = new System.Windows.Forms.Panel();
            this.label1 = new System.Windows.Forms.Label();
            this.panel2 = new System.Windows.Forms.Panel();
            this.label2 = new System.Windows.Forms.Label();
            this.listBox1 = new System.Windows.Forms.ListBox();
            this.OnTvRadioButton = new System.Windows.Forms.RadioButton();
            this.OffTvRadioButton = new System.Windows.Forms.RadioButton();
            this.VolumeUpTvRadioButton = new System.Windows.Forms.RadioButton();
            this.VolumeDownTVRadioButton = new System.Windows.Forms.RadioButton();
            this.BtnExecuteTVCommand = new System.Windows.Forms.Button();
            this.VolumeDownSpeakersRadioButton = new System.Windows.Forms.RadioButton();
            this.VolumeUpSpeakersRadioButton = new System.Windows.Forms.RadioButton();
            this.OffSpeakersRadioButton = new System.Windows.Forms.RadioButton();
            this.OnSpeakersRadioButton = new System.Windows.Forms.RadioButton();
            this.BtnExecuteSpeakersCommand = new System.Windows.Forms.Button();
            this.panel1.SuspendLayout();
            this.panel2.SuspendLayout();
            this.SuspendLayout();
            // 
            // panel1
            // 
            this.panel1.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.panel1.Controls.Add(this.BtnExecuteTVCommand);
            this.panel1.Controls.Add(this.VolumeDownTVRadioButton);
            this.panel1.Controls.Add(this.VolumeUpTvRadioButton);
            this.panel1.Controls.Add(this.OffTvRadioButton);
            this.panel1.Controls.Add(this.OnTvRadioButton);
            this.panel1.Controls.Add(this.label1);
            this.panel1.Location = new System.Drawing.Point(65, 12);
            this.panel1.Name = "panel1";
            this.panel1.Size = new System.Drawing.Size(125, 366);
            this.panel1.TabIndex = 0;
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(24, 22);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(74, 17);
            this.label1.TabIndex = 0;
            this.label1.Text = "TV remote";
            // 
            // panel2
            // 
            this.panel2.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.panel2.Controls.Add(this.BtnExecuteSpeakersCommand);
            this.panel2.Controls.Add(this.VolumeDownSpeakersRadioButton);
            this.panel2.Controls.Add(this.VolumeUpSpeakersRadioButton);
            this.panel2.Controls.Add(this.OffSpeakersRadioButton);
            this.panel2.Controls.Add(this.OnSpeakersRadioButton);
            this.panel2.Controls.Add(this.label2);
            this.panel2.Location = new System.Drawing.Point(274, 12);
            this.panel2.Name = "panel2";
            this.panel2.Size = new System.Drawing.Size(125, 366);
            this.panel2.TabIndex = 1;
            // 
            // label2
            // 
            this.label2.AutoSize = true;
            this.label2.Location = new System.Drawing.Point(6, 22);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(116, 17);
            this.label2.TabIndex = 1;
            this.label2.Text = "Speakers remote";
            // 
            // listBox1
            // 
            this.listBox1.FormattingEnabled = true;
            this.listBox1.ItemHeight = 16;
            this.listBox1.Location = new System.Drawing.Point(455, 12);
            this.listBox1.Name = "listBox1";
            this.listBox1.Size = new System.Drawing.Size(452, 356);
            this.listBox1.TabIndex = 2;
            // 
            // OnTvRadioButton
            // 
            this.OnTvRadioButton.AutoSize = true;
            this.OnTvRadioButton.Location = new System.Drawing.Point(10, 82);
            this.OnTvRadioButton.Name = "OnTvRadioButton";
            this.OnTvRadioButton.Size = new System.Drawing.Size(48, 21);
            this.OnTvRadioButton.TabIndex = 6;
            this.OnTvRadioButton.TabStop = true;
            this.OnTvRadioButton.Text = "On";
            this.OnTvRadioButton.UseVisualStyleBackColor = true;
            this.OnTvRadioButton.CheckedChanged += new System.EventHandler(this.OnTvRadioButton_CheckedChanged);
            // 
            // OffTvRadioButton
            // 
            this.OffTvRadioButton.AutoSize = true;
            this.OffTvRadioButton.Location = new System.Drawing.Point(10, 118);
            this.OffTvRadioButton.Name = "OffTvRadioButton";
            this.OffTvRadioButton.Size = new System.Drawing.Size(48, 21);
            this.OffTvRadioButton.TabIndex = 7;
            this.OffTvRadioButton.TabStop = true;
            this.OffTvRadioButton.Text = "Off";
            this.OffTvRadioButton.UseVisualStyleBackColor = true;
            this.OffTvRadioButton.CheckedChanged += new System.EventHandler(this.OffTvRadioButton_CheckedChanged);
            // 
            // VolumeUpTvRadioButton
            // 
            this.VolumeUpTvRadioButton.AutoSize = true;
            this.VolumeUpTvRadioButton.Location = new System.Drawing.Point(10, 158);
            this.VolumeUpTvRadioButton.Name = "VolumeUpTvRadioButton";
            this.VolumeUpTvRadioButton.Size = new System.Drawing.Size(88, 21);
            this.VolumeUpTvRadioButton.TabIndex = 8;
            this.VolumeUpTvRadioButton.TabStop = true;
            this.VolumeUpTvRadioButton.Text = "Volume +";
            this.VolumeUpTvRadioButton.UseVisualStyleBackColor = true;
            this.VolumeUpTvRadioButton.CheckedChanged += new System.EventHandler(this.VolumeUpTvRadioButton_CheckedChanged);
            // 
            // VolumeDownTVRadioButton
            // 
            this.VolumeDownTVRadioButton.AutoSize = true;
            this.VolumeDownTVRadioButton.Location = new System.Drawing.Point(10, 199);
            this.VolumeDownTVRadioButton.Name = "VolumeDownTVRadioButton";
            this.VolumeDownTVRadioButton.Size = new System.Drawing.Size(85, 21);
            this.VolumeDownTVRadioButton.TabIndex = 9;
            this.VolumeDownTVRadioButton.TabStop = true;
            this.VolumeDownTVRadioButton.Text = "Volume -";
            this.VolumeDownTVRadioButton.UseVisualStyleBackColor = true;
            this.VolumeDownTVRadioButton.CheckedChanged += new System.EventHandler(this.VolumeDownTVRadioButton_CheckedChanged);
            // 
            // BtnExecuteTVCommand
            // 
            this.BtnExecuteTVCommand.Location = new System.Drawing.Point(10, 258);
            this.BtnExecuteTVCommand.Name = "BtnExecuteTVCommand";
            this.BtnExecuteTVCommand.Size = new System.Drawing.Size(101, 61);
            this.BtnExecuteTVCommand.TabIndex = 10;
            this.BtnExecuteTVCommand.Text = "Execute TV comand";
            this.BtnExecuteTVCommand.UseVisualStyleBackColor = true;
            this.BtnExecuteTVCommand.Click += new System.EventHandler(this.BtnExecuteTVCommand_Click);
            // 
            // VolumeDownSpeakersRadioButton
            // 
            this.VolumeDownSpeakersRadioButton.AutoSize = true;
            this.VolumeDownSpeakersRadioButton.Location = new System.Drawing.Point(9, 199);
            this.VolumeDownSpeakersRadioButton.Name = "VolumeDownSpeakersRadioButton";
            this.VolumeDownSpeakersRadioButton.Size = new System.Drawing.Size(85, 21);
            this.VolumeDownSpeakersRadioButton.TabIndex = 13;
            this.VolumeDownSpeakersRadioButton.TabStop = true;
            this.VolumeDownSpeakersRadioButton.Text = "Volume -";
            this.VolumeDownSpeakersRadioButton.UseVisualStyleBackColor = true;
            this.VolumeDownSpeakersRadioButton.CheckedChanged += new System.EventHandler(this.VolumeDownSpeakersRadioButton_CheckedChanged);
            // 
            // VolumeUpSpeakersRadioButton
            // 
            this.VolumeUpSpeakersRadioButton.AutoSize = true;
            this.VolumeUpSpeakersRadioButton.Location = new System.Drawing.Point(9, 158);
            this.VolumeUpSpeakersRadioButton.Name = "VolumeUpSpeakersRadioButton";
            this.VolumeUpSpeakersRadioButton.Size = new System.Drawing.Size(88, 21);
            this.VolumeUpSpeakersRadioButton.TabIndex = 12;
            this.VolumeUpSpeakersRadioButton.TabStop = true;
            this.VolumeUpSpeakersRadioButton.Text = "Volume +";
            this.VolumeUpSpeakersRadioButton.UseVisualStyleBackColor = true;
            this.VolumeUpSpeakersRadioButton.CheckedChanged += new System.EventHandler(this.VolumeUpSpeakersRadioButton_CheckedChanged);
            // 
            // OffSpeakersRadioButton
            // 
            this.OffSpeakersRadioButton.AutoSize = true;
            this.OffSpeakersRadioButton.Location = new System.Drawing.Point(9, 118);
            this.OffSpeakersRadioButton.Name = "OffSpeakersRadioButton";
            this.OffSpeakersRadioButton.Size = new System.Drawing.Size(48, 21);
            this.OffSpeakersRadioButton.TabIndex = 11;
            this.OffSpeakersRadioButton.TabStop = true;
            this.OffSpeakersRadioButton.Text = "Off";
            this.OffSpeakersRadioButton.UseVisualStyleBackColor = true;
            this.OffSpeakersRadioButton.CheckedChanged += new System.EventHandler(this.OffSpeakersRadioButton_CheckedChanged);
            // 
            // OnSpeakersRadioButton
            // 
            this.OnSpeakersRadioButton.AutoSize = true;
            this.OnSpeakersRadioButton.Location = new System.Drawing.Point(9, 82);
            this.OnSpeakersRadioButton.Name = "OnSpeakersRadioButton";
            this.OnSpeakersRadioButton.Size = new System.Drawing.Size(48, 21);
            this.OnSpeakersRadioButton.TabIndex = 10;
            this.OnSpeakersRadioButton.TabStop = true;
            this.OnSpeakersRadioButton.Text = "On";
            this.OnSpeakersRadioButton.UseVisualStyleBackColor = true;
            this.OnSpeakersRadioButton.CheckedChanged += new System.EventHandler(this.OnSpeakersRadioButton_CheckedChanged);
            // 
            // BtnExecuteSpeakersCommand
            // 
            this.BtnExecuteSpeakersCommand.Location = new System.Drawing.Point(10, 258);
            this.BtnExecuteSpeakersCommand.Name = "BtnExecuteSpeakersCommand";
            this.BtnExecuteSpeakersCommand.Size = new System.Drawing.Size(101, 61);
            this.BtnExecuteSpeakersCommand.TabIndex = 14;
            this.BtnExecuteSpeakersCommand.Text = "Execute speakers comand";
            this.BtnExecuteSpeakersCommand.UseVisualStyleBackColor = true;
            this.BtnExecuteSpeakersCommand.Click += new System.EventHandler(this.BtnExecuteSpeakersCommand_Click);
            // 
            // Form1
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(963, 400);
            this.Controls.Add(this.listBox1);
            this.Controls.Add(this.panel2);
            this.Controls.Add(this.panel1);
            this.Name = "Form1";
            this.Text = "Form1";
            this.panel1.ResumeLayout(false);
            this.panel1.PerformLayout();
            this.panel2.ResumeLayout(false);
            this.panel2.PerformLayout();
            this.ResumeLayout(false);

        }

        #endregion

        private System.Windows.Forms.Panel panel1;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.Panel panel2;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.ListBox listBox1;
        private System.Windows.Forms.Button BtnExecuteTVCommand;
        private System.Windows.Forms.RadioButton VolumeDownTVRadioButton;
        private System.Windows.Forms.RadioButton VolumeUpTvRadioButton;
        private System.Windows.Forms.RadioButton OffTvRadioButton;
        private System.Windows.Forms.RadioButton OnTvRadioButton;
        private System.Windows.Forms.Button BtnExecuteSpeakersCommand;
        private System.Windows.Forms.RadioButton VolumeDownSpeakersRadioButton;
        private System.Windows.Forms.RadioButton VolumeUpSpeakersRadioButton;
        private System.Windows.Forms.RadioButton OffSpeakersRadioButton;
        private System.Windows.Forms.RadioButton OnSpeakersRadioButton;
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Client
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new Form1());
        }
    }
}
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Client")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("Client")]
[assembly: AssemblyCopyright("Copyright ©  2017")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("437ae97d-5158-4ad7-a1e1-18b5b910339c")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Client.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.Properties
{


    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}
namespace Commands
{
    public interface ICommand
    {
        string Execute();
    }
}
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Commands")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("Commands")]
[assembly: AssemblyCopyright("Copyright ©  2017")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("fd43b735-d60d-4940-b07a-31ac26a7c26e")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
using SoundDevices;
using System;

namespace Commands.Speakers
{
    public class TurnSpeakersOff : ICommand
    {
        private ISoundDevice soundDevice;
        public TurnSpeakersOff(ISoundDevice newSoundDevice)
        {
            soundDevice = newSoundDevice;
        }
        public string Execute()
        {
            return soundDevice.TurnOff();
        }
    }
}
using SoundDevices;
using System;

namespace Commands.Speakers
{
    public class TurnSpeakersOn : ICommand
    {
        private ISoundDevice soundDevice;
        public TurnSpeakersOn(ISoundDevice newSoundDevice)
        {
            soundDevice = newSoundDevice;
        }
        public string Execute()
        {
            return soundDevice.TurnOn();
        }
    }
}
using SoundDevices;
using System;

namespace Commands.Speakers
{
    public class TurnSpeakersVolumeDown : ICommand
    {
        private ISoundDevice soundDevice;
        public TurnSpeakersVolumeDown(ISoundDevice newSoundDevice)
        {
            soundDevice = newSoundDevice;
        }
        public string Execute()
        {
            return soundDevice.VolumeDown();
        }
    }
}
using SoundDevices;
using System;

namespace Commands.Speakers
{
    public class TurnSpeakersVolumeUp : ICommand
    {
        private ISoundDevice soundDevice;
        public TurnSpeakersVolumeUp(ISoundDevice newSoundDevice)
        {
            soundDevice = newSoundDevice;
        }
        public string Execute()
        {
            return soundDevice.VolumeUp();
        }
    }
}
using SoundDevices;
using System;

namespace Commands.Television
{
    public class TurnTelevisionOff : ICommand
    {
        private ISoundDevice soundDevice;
        public TurnTelevisionOff(ISoundDevice newSoundDevice)
        {
            soundDevice = newSoundDevice;
        }
        public string Execute()
        {
            return soundDevice.TurnOff();
        }
    }
}
using SoundDevices;
using System;

namespace Commands.Television
{
    public class TurnTelevisionOn : ICommand
    {
        private ISoundDevice soundDevice;
        public TurnTelevisionOn(ISoundDevice newSoundDevice)
        {
            soundDevice = newSoundDevice;
        }
        public string Execute()
        {
           return soundDevice.TurnOn();
        }
    }
}
using SoundDevices;

namespace Commands.Television
{
    public class TurnTelevisionVolumeDown : ICommand
    {
        private ISoundDevice soundDevice;
        public TurnTelevisionVolumeDown(ISoundDevice newSoundDevice)
        {
            soundDevice = newSoundDevice;
        }
        public string Execute()
        {
            return soundDevice.VolumeDown();
        }
    }
}
using SoundDevices;
using System;

namespace Commands.Television
{
    public class TurnTelevisionVolumeUp : ICommand
    {
        private ISoundDevice soundDevice;
        public TurnTelevisionVolumeUp(ISoundDevice newSoundDevice)
        {
            soundDevice = newSoundDevice;
        }
        public string Execute()
        {
            return soundDevice.VolumeUp();
        }
    }
}
namespace SoundDevices
{
    public interface ISoundDevice
    {
        string TurnOn();
        string TurnOff();
        string VolumeUp();
        string VolumeDown();
    }
}
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("ElectronicDevices")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ElectronicDevices")]
[assembly: AssemblyCopyright("Copyright ©  2017")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("c6ef313b-dc2a-41e2-bc05-88819cb1315c")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
using System;

namespace SoundDevices
{
    public class Speakers : ISoundDevice
    {
        private int _volume;
        public string TurnOff()
        {
            return "The speakers are OFF";
        }

        public string TurnOn()
        {
            return "The SPEAKERS are ON";
        }

        public string VolumeDown()
        {
            _volume--;
            return "The volume of the SPEAKERS is turned DOWN to " + _volume;
        }

        public string VolumeUp()
        {
            _volume++;
            return "The volume of the SPEAKERS is turned UP to " + _volume;
        }
    }
}
namespace SoundDevices
{
    public class Television : ISoundDevice
    {
        private int _volume;
        public string TurnOff()
        {
            return "The TELEVISION is OFF";
        }

        public string TurnOn()
        {
            return "The TELEVISION is ON";
        }

        public string VolumeDown()
        {
            _volume--;
            return "The volume of the TELEVISION is turned DOWN to " + _volume;
        }

        public string VolumeUp()
        {
            _volume++;
            return "The volume of the TELEVISION is turned UP to " + _volume;
        }
    }
}
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("SoundDeviceRemotes")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SoundDeviceRemotes")]
[assembly: AssemblyCopyright("Copyright ©  2017")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("e5522648-57cd-4f0f-99bd-17769c934fe3")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
using SoundDevices;

namespace SoundDeviceRemotes
{
    public class SpeakersRemote
    {
        public static ISoundDevice GetSoundDevice()
        {
            return new Speakers();
        }
    }
}
using SoundDevices;

namespace SoundDeviceRemotes
{
    public class TelevisionRemote
    {
        public static ISoundDevice GetSoundDevice()
        {
            return new Television();
        }
    }
}
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Commands;
using Commands.Television;
using Commands.Speakers;
using SoundDevices;
using SoundDeviceRemotes;
namespace Tests
{
    [TestClass]

    public class CommandPatternTests
    {
        private ISoundDevice television = TelevisionRemote.GetSoundDevice();
        private ISoundDevice speakers = SpeakersRemote.GetSoundDevice();

        private ICommand command;
        string result = "";
        [TestMethod]
        public void TurnTelevisionOn()
        {
            command = new TurnTelevisionOn(television);
            string result = command.Execute();
            Assert.AreEqual("The TELEVISION is ON", result);
        }
        [TestMethod]
        public void TurnTelevisionVolumeUp_Twice()
        {
            command = new TurnTelevisionVolumeUp(television);
            result = command.Execute();
            result = command.Execute();

            Assert.AreEqual("The volume of the TELEVISION is turned UP to 2", result);
        }
        [TestMethod]
        public void TurnSpeakersOff()
        {
            command = new TurnSpeakersOff(speakers);  
            result = command.Execute();

            Assert.AreEqual("The speakers are OFF", result);
        }
        [TestMethod]
        public void TurnSpeakersVolumeDown_3_Times()
        {
            command = new TurnSpeakersVolumeDown(speakers);
            result = command.Execute();
            result = command.Execute();
            result = command.Execute();

            Assert.AreEqual("The volume of the SPEAKERS is turned DOWN to -3", result);
        }
    }
}
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Tests")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("Tests")]
[assembly: AssemblyCopyright("Copyright ©  2017")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("df3833b5-c98e-4ef7-9a46-a98b4ab81086")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
